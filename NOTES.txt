///////////////////////////////////////////////////////////////////////////////
// This document contains course notes for the course:
// "C++ Game Engine Programming" by Gustavo Pezzi
// https://pikuma.com/courses/cpp-2d-game-engine-development
///////////////////////////////////////////////////////////////////////////////

 SECTIONS:
   #1: COURSE OVERVIEW
   #2: C++
   #3: OBJECT-ORIENTED PROGRAMMING (OOP)
   #4: ENTITY-COMPONENT-SYSTEM (ECS) DESIGN
   #5: OTHER NOTES
   #6: LINKS AND RESOURCES

///////////////////////////////////////////////////////////////////////////////
// #1 | COURSE OVERVIEW:
///////////////////////////////////////////////////////////////////////////////

   [X]  #1: Introduction
   [X]  #2: Libraries & Dependencies
   [X]  #3: Displaying the Game Window
   [X]  #4: Rendering SDL Objects
   [X]  #5: Fixing the Game Time Step
   [X]  #6: Logger
   [X]  #7: Files & Folder Structure
   [X]  #8: Organizing Game Objects
   [X]  #9: ECS Design
   [X] #10: ECS Implementation
   [-] #11: Creating Entities & Components
   [-] #12: Creating Systems
   [-] #13: Managing Assets
   [-] #14: Animation System
   [-] #15: Collision System
   [-] #16: Killing Entities
   [-] #17: Event System
   [-] #18: Other Useful Components & Systems
   [-] #19: Tagging & Grouping Entities
   [-] #20: Data-Oriented Design
   [-] #21: Displaying True-Type Fonts
   [-] #22: Dear ImGui
   [-] #23: Culling & Map Control
   [-] #24: Lua Scripting
   [-] #25: Next Steps
   [-] #26: Bonus: The Map Editor
   [-] #27: Moving Forward
  
   [X] COMPLETED / [-] NOT COMPLETED


///////////////////////////////////////////////////////////////////////////////
// #2 | C++
///////////////////////////////////////////////////////////////////////////////

 - Compiling:
     C++ Source Code 
          -> 
     Preprocessor
       Scans source code, checks for hashtag statements (#include, #define, etc)
          -> 
     Compiler
       Checks if everything makes sense, obeys the rules of C++ syntax, 
       name of functions, order of parameters, etc.
          -> 
     Linker
       Bundling everything together, link all the implementations of
       the libraries together
          ->
     Executable

 - External libraries can be included in two ways:
     1 - Source code of the library:
          The source code of the libraries need to be placed in the project
          folder (e.g. in a "libs" folder) and included in the C++ file using
          #include <(library name)/(header file).hpp> and the compiler command 
          -I"./libs" is used to include the source code folder when compiling.
     2 - Pre-compiled binaries (faster than compiling on each build):
           The libraries (for this project SDL2 and Lua are pre-compiled) need
           to be installed on the system, included in the C++ file by using 
           #include <(library name)/(header file).hpp> and linked in the
           compiler by using -l(library name) in the command when compiling.
 
 - This project will use modern C++ with the C++17 standard.

 - The project will use the following libraries:
     SDL2:       (pre-compiled) rendering and input
     GLM:        (source code)  math helper
     Dear ImGui: (source code)  to create UI
     Sol:        (source code)  binding for modern C+++ & Lua

 - Command to compile the project using the GNU compiler (simple example):
     g++ -Wall -std=c++17 src/Main.cpp -lSDL2 -o gameengine
      |     |       |            |        |          |      
      |     |       |            |        |    Output executable file
      |     |       |            |     Linked library 
      |     |       |   Included C++ files for the project
      |     |   C++ standard
      | Show errors
  The compiler

 - To make things easier compiling rules will be written in the Makefile.
     "build" for building the project
     "clean" to delete compiled files
     "run" to run the project
     (To build the project simply run the "make build" command)

 - The C++ file is divided into two files.
   Header file (.h) and Implementation File (.cpp).
   The header file only contain the function prototypes (name of the function,
   return value and parameters) and no implementation. 
   Similar to the "table of contents" section in a book.
   Implementation files (.cpp) contain the body of the function defined in the
   header file.

 - Header protection guard:
     Makes sure a header file is only included once.
     Always remember to include a protection guard in header files.
       #ifndef (name)
       #define (name)
       ...
       #endif
     Or:
       #pragma once

 - SDL is using double-buffered rendering:
   One buffer is displayed on screen while the other buffer is prepared
   and swapped when it's ready to be presented.
 
 - For this project we'll make our own simple Logger class for logging,
   but for something to use in real life production a third party library might
   be a better option with scalability and performance in mind.

 - Popular logging libraries:
    + SPDLog library (for C++ projects) here: https://github.com/gabime/spdlog
    + Log.c library (for C99 projects) here: https://github.com/rxi/log.c

 - Smart pointers:
    + In modern C++ we have something called smart pointers which is a tool to
      help us with memory management
    + Answer to the issue of the programmer having to always manage memory
      by automatically destroying objects
    + There are 3 types of smart pointers:
      + unique_ptr
      + shared_ptr
      + weak_ptr
    + unique_ptr:
      + Example code for creating unique_ptr:
        std:unique_ptr<Enemy> enemy = std::make_unique<Enemy>();
      + We are creating one unique smart pointer (that cannot share its ownership)
      + We use the function make_unique to create a unique smart pointer of 
        the type Enemy
      + Once the unique pointer loses its owner's scope, it detroys the 
        enemy object automatically
    + shared_ptr:
      + Example code for creating shared_ptr:
        std::shared_ptr<Enemy> enemy = std::make_shared<Enemy>();
      + The resource is only destroyed once every smart pointer goes out of scope
      + We are creating one chared smart pointer (it can have multiple ownership)
      + We use the function make_shared to create a shared smart pointer of 
        the type Enemy
      + As soon as the last smart pointer owning the resource goes out of scope, 
        the object is detroyed automatically
      + A shared pointer uses a reference count to keep track of how many 
        objects are still being referenced

 - Cyclic dependencies: Be aware of cyclic dependencies! Not good.

///////////////////////////////////////////////////////////////////////////////
// #4 | OBJECT-ORIENTED PROGRAMMING (OOP)
///////////////////////////////////////////////////////////////////////////////

 - Game programming is a good sandbox to learn and practice the ideas of OOP.

 - Each class will quite often have it's own file, it is often considered good
   practice, but not a requirement, and not always the best sollution

 - When making an object the contructor is invoked and the destructor is
   invoked when the object is destroyed. If making a new object without using 
   the "new" keyword the object will be stored in the stack and 
   be detroyed when the scope ends.

 - Object-oriented programming and the stack:
    + The stack is a place in memory where we can push values and pop values.
    + ExampleClass example
       + Creates an object in the stack  without the "new" keyword.
         It will automatically be destroyed when the scope ends.
    + In the stack, the allocation happens on contigous blocks of memory.
      It can grow and shrink when we push and pop values.
    + The size of memory to be allocated is know to the compiler.
    + The stack has a fixed size (OS-dependent, as an example Linux gives
      2MB per thread by default)
    + We don't have to worry about memory allocation/dealloation of 
      stack variables

 - Object-oriented programming and the heap:
    + The heap is also memory, we can allocate more and more memory as needed
    + In the heap we are responsible for deallocating the memory when
      we don't need it any more. If we forget to do this we get memory leaks!
    + ExampleClass* example = new ExampleClass();
       + Creates an object in the heap using the "new" keyword. 
         It needs to be explicitly deleted!
    + delete example
       + Deletes the object and deallocates the memory
    + In the heap, memory is allocated dynamically and it's usually
      not contigous
    + The heap has no fixed-size restrictions, but heap handling is slower
      than stack handling
    + The programmer is responsible for remembering to deallocate the object
      in memory
    + The "new" keyword replaces how it was done previously in C with
      memory allocation (malloc) and Initialization (constructor).
      The "new" keyword allocates memory and calls the constructor.
    + The "delete" keyword replaces how it was done previously in C with
      Deinitialization (destructor) and Deallocation (free).
      The "delete" keyword calls the destructor and deallocates memory.

 - Examples of C++ Object Creation:
    
    + We create a single Enemy object in the stack and we don't need to 
      explicitly delete the object since it will be destroyed automatically 
      once we leave the scope of the function block:

      class Enemy {
          public:
              Enemy()  { /* Constructor */ }
              ~Enemy() { /* Destructor */ }
              
              ...
              ...
              ...
      };

      void Run() {
          Enemy e;

          // Here we can use the object
      }
    
    + We create a single Bullet object dunamically in the heap and call its
      constructor by using the new keyword, and we also need to explicitly
      call delete to destroy and free the object:

      class Bullet {
          public:
              Bullet()  { /* Constructor */}
              ~Bullet() { /* Destructor */}

              ...
              ...
              ...
      };

      void Run(){
          Bullet* b = new Bullet;

          // Here we can use the object

          delete b;
      }

    + We create a static array of 100 Particle objects dynamically and invoke
      their constructors by using new[100]. We also need to explicitly call
      delete[] to destroy all the objects in the array:

      class Particle {
          public:
              Particle()  { /* Constructor */}
              ~Particle() { /* Destructor */}

              ...
              ...
              ...
      };

      void Run(){
          Particle* p = new Particle[100];

          // Here we can use the array

          delete[] p;
      }

    + Note: These examples use raw pointers to deal with C++ objects.
      Modern C++ uses smart pointers to help programmers with the issue of
      having to remember to manually destroy objects and in this project we
      will use smart pointers.

 - Encapsulation: Getters and Setters.
    + Getters for variables we are not going to change should always be const

 - Templates:
   Single template that will work for multiple types.
   Helpful for working with generics.
   The implementation of templates are usually put in the header file.

   Example code:

     Prototype:
       template <typename T> void RequireComponent();

     Implementation:
       template<typename T>
       void System::RequireComponent() {
           const auto componentId = Component<T>::GetId();
           componentSignature.set(componentId);
       }

     Usage:
       RequireComponent<TransformComponent>();
       RequireComponent<BoxColliderComponent>();
       RequireComponent<SpriteComponent>();

 - In this project we'll use the C++17 erase-remove idiom to remove items
   from a vector, but it's worth noting that in C++20 it is made easier
   by using std::erase() or std::erase_if()

 - Operator Overloading example:
     Entity& operator =(const Entity& other) = default;
     bool operator ==(const Entity& other) const {return id == other.id;} 
     bool operator !=(const Entity& other) const {return id != other.id;} 
     bool operator >(const Entity& other) const {return id > other.id;} 
     bool operator <(const Entity& other) const {return id < other.id;} 
   

///////////////////////////////////////////////////////////////////////////////
// #4 | ENTITY-COMPONENT-SYSTEM (ECS) DESIGN
///////////////////////////////////////////////////////////////////////////////

 - In games there are a lot of "things": 
   Items, characters, bullets, light-sources, cameras, triggers, etc.

 - Object Inheritance Design:

    + At first glance it might seem like a good approach, but it is in fact
      not super perfect.

                           Thing
             ("game object", "actor", "entity")
       Everything inherits from the base parent class.
              /        |          |         \
             /         |          |          \
          Player     Enemy     Obstacle     Light

    + Most game engines do NOT use the inheritance approach.
      Because the different types of entities might be very different
      and have few similarities to use in the base class.
      Multiple inheritance issue in C++ (diamond inheritance).

 - Component-Based Design:
    + In the past 10 years or so component-based design has been very popular!
    + Used by big game engines like Unity.
    + Main entity that we can add different compenents to as needed.

    Examples:
      
      + Entity (Player)
        + TransformComponent
        + SpriteComponent
        + ColliderComponent
      
      + Entity (Enemy)
        + TransformComponent
        + SpriteComponent
        + ProjectileEmitterComponent
      
      + Entity (DoorTrigger)
        + TransformComponent
        + ColliderComponent

 - Two types of Component-Based design:
    
    + Object-oriented design:
      + Easy for humans to understand.
      + It has pointers to different places in memory all over the place
        which is not very good for performance
    
    + Data-oriented design:
      + Is more focused on performance where things are put on
        a contigous space in memory
 
 - Example of component-based object-orientated code:
     
     // Manages entities
     class Registry {
         vector<Entity*> entities;

         void AddEntity(entity);
         void RemoveEntity(entity);
         void Update(deltaTime);
         void Render();

         ...
     }

     // Base entity class
     class Entity {
         vector<Component*> components; // List of components

         void AddComponent<T>(component);
         void Update(deltaTime);
         void Render();

         ...
     }

     // Base component class
     class Component {
         Entity* owner;

         virtual Update();
         virtual Render();
     }

     // Transform component class that inherits from the base component class
     class TransformComponent: public Component {
         glm::vec2 position;
         glm::vec2 scale;
         double rotation;

         Update() override {
             ...
         }

         Render() override {
             ...
         }
     }
     
     // Collision component class that inherits from the base component class
     class CollisionComponent: public Component {
         SDL_Rect collider;

         Update() override {
             ...
         }

         Render() override {
             ...
         }
     }

 - Entity-Component-System (ECS) Design:
    + For this project we will use the ECS programming pattern
    + Connected to the idea of data-oriented design (performance)
    + Unity is famous for using the ECS approach
   
    + Entities:
      + Simply an ID (only represented by a numerical identifier)
      + No components inside the entity!
      + They represent the objects that populate the game scene

    + Components:
      + Components are pure data
      + No behaviour, update or render functions. Just structs with data inside
      + They are organized by the data itself rather than by entity.
        This organization is the key difference between 
        object-oriented and data-oriented design.

    + Systems:
      + Systems are the logic (code) that transforms components from one state
        to another state
      + For example, a MovementSystem might update the positions of all moving
        entities by their velocity since the previous frame

 - There are third-party ECS libraries that will have a lot better performance
   than what we will create in this project, but writing our own ECS system 
   from scratch will be a very good learning experience.

 - Examples of ECS code:
    
    // Entities: Just an ID
    class Entity {
        int id;
    }

    // Components: Plain data (no logic)
    struct TransformComponent {
        glm::vec2 position;
        glm::vec2 scale;
        double rotation;
    }

    struct VelocityComponent {
        glm::vec2 velocity;
    }

    // Systems: Perform logic on components and entities
    class MovementSystem {
        public:
            MovementSystem() {
                RequireComponent<TransformComponent>();
                RequireComponent<VelocityComponent>();
            }

            void Update(double deltaTime) {
                for (auto identity: GetEntities()) {
                    VelocityComponent& velocity = entity.GetComponent<VelocityComponent>();
                    TransformComponent& transform = entity.GetComponent<TransformComponent>();

                    // Update entity's position based on its velocity
                    transform.position.x += rigidbody.velocity.x * deltaTime;
                    transform.position.y += rigidbody.velocity.y * deltaTime;
                }
            }
    }

 - Signature:
    Systems are interested in some entities based on which components that 
    entity has. We will make a 32 bit long bitset called Signature that shows which 
    components are enabled or disabled on an entity and which entities a system
    is interested in. The signature will act like a "key" between the entities
    and the systems.

    Signature example (16 bits):
    0 0 0 0 0 1 1 0
     \
      Each bit is mapped to a component id, if it's 0 the component is not
      enabled on the entity, if it's 1 the component is enabled on the entity

    Code example:
    const unsigned int MAX_COMPONENTS = 32;
    typedef std::bitset<MAX_COMPONENTS> Signature;

    class Entity {
        int id;
    }

    class Component {
        int id;
    }

    class System {
        private:
            // Which components an entity must have for the system to 
            // consider the entity
            Signature componentSignature;

            // List of all entities that the system is interested in
            std::vector<Entity> entities;
    };


///////////////////////////////////////////////////////////////////////////////
// #5 | OTHER NOTES
///////////////////////////////////////////////////////////////////////////////

 - Game loop: Process input -> Update Game -> Render (the holy trinity)

 - The game loop needs to be steady capped at a desired FPS with a 
   fixed time step. We can use SDL_Delay() to achieve this.

 - All position/physics updates need to take into account how much time has
   passed since last frame and multiply the movement by this factor to achieve
   the same results on different framerates. This is called Delta-Time.

 - There are two types of Delta-Time:
   
   Variable Delta-Time:
    + Con: Non-deterministic
    + Pro: Game time equals real time
   
   Constant Delta-Time:
    + Con: Fast game on high FPS, slow game on low FPS
    + Pro: Deterministic
   
   For this project we will start by implementing a simple Variable Delta-Time.

 - There are smarter and fancier ways to implement a controlled time step:
     "Fix Your Timestep!" by Glenn Fiedler
     https://gafferongames.com/post/fix_your_timestep/


///////////////////////////////////////////////////////////////////////////////
// #6 | LINKS AND RESOURCES
///////////////////////////////////////////////////////////////////////////////

 - "How to make a simple entity-component-system in C++" by David Colson:
    https://www.david-colson.com/2020/02/09/making-a-simple-ecs.html

 - "Game Programming Patterns" by Robert Nystrom
    https://gameprogrammingpatterns.com/

